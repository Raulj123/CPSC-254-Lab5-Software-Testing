test case #1 - procedure_Primary:
    result: 
        The test did pass since the program crashed as we expected.
    why?: 
        The program crashed since the input had a vector<token_323> of 
        192153584101141163 elements. This amount of elements exceeds the 
        maximum amount of elements a vector<token_323> can have. The maximum 
        amount of elements the vector can have is 192153584101141162 which 
        the input exceeded by 1. 
       
test case #2 - procedure_primary:
    results:
    	The test passed since the program will crash as expecetd 
    why?: 
    	Program will crash not due to the procedure_Primary function but due to the lexical analyzer.
    	Since the long data type is treated as one token. 
        
test case #3 - procedure_Print
    results:
       Parts of the string was missing. Depending on where it was placed the rest of the string would be voided out 
    why?:
        Program will not crash because \0 is a valid string but it is also a nullptr. Therefore, anything after \0 is 
        voided. A minor flaw that doesn't cause fatal errors but can feed compiler incorrect information. 
        
test case #4 - R8
    results:
    	Program will crash if a char is declared as char are not recognized as qualifiers which are part of the declaration process.
    why?:
    	This test is sufficient to identify that though int, booleans, and real are qualifiers, char is not a qualifer but should be.

test case #5 - procedure_Parameter
    results:
        The program did not crash, meaning it returns 1 instead of 0,
        as a negative int does not quilify as a fatal error, but in the paramter of sqrt(). 
    why:
        Becuase sqrt() has a mathematical domain it is restriced to using only postive numbers.
        If a negative number is inputed the output will just be the maximum negative number for an int.
        Instead of throwing an exeption error and crashing.  
        
 Test case #6 - R19.<Return> -> return; | return <0/1>;
  result:
    The program did crash due to the operation being invalid 
  why:
    Divding by zero is an invalid operation, it raises a "zerodivisionError" which then causes
    the program to crash 
    
 Test case #7 - R23. <Condition> -> <Expression "x">  <Relop "==">   <Expression"0.3">
   result:
       The program considered the condition false. 
   why:
       This is because even though it should be true, The value of x and y may not be exactly equal
       to 0.1 and 0.2 due to floating-point arithmetic which can cause a slight rounding error.
       So the adding resulted in a slightly different answer from 0.3 causing the condition to be false
    
 Test case #8 R12. <Declaration> -> <Qualifier= "int"> <IDs ="x=5.5">
    result:
        The program did not crash but produced 5 as the result for x
    why:
        The value 5.5 is converted to an integer before it is assined to the variable x.
        This makes the declaration appear true even though it should be false due to a type
        mismatch.
        

Test case #9- R24:
Test Result:
procedure_Relop should recognize the input token as a valid relational operator and generate the appropriate instruction for the NEQ operator. The function should also update rule_holder and return true. No errors or issues should be encountered.

Problem:
None found.

Test case #10- R25:

Test Result:
procedure_Term should recognize the input token as a valid factor and return true. procedure_Expression_q should recognize the lack of a leading + or - symbol as a valid case and update rule_holder before returning true. No errors or issues should be encountered.

Problem:
None found.


Test case #11- R25.1:

Test Result:
procedure_Expression_q should recognize the + symbol and call procedure_Term and procedure_Expression_q to handle the remaining integer literal. The function should generate the appropriate instruction for the ADD operator and update rule_holder before returning true. No errors or issues should be encountered.

Problem:
None found.


Test case #12- R26: 

Test Result:
procedure_Factor should recognize the input token as a valid factor and return true. procedure_Term_q should recognize the lack of a trailing factor and update rule_holder before returning true. No errors or issues should be encountered.

Problem:
None found.

Test case #13 - R9 
   result:
   	The program crashes due to a missing '}' or no '{' in the first place.
   why?:
   	This tests scenarios in which the lexer should have output an error.
   	
 Test case #14- R10
   result:
   	The program would run fine and there are no errors triggerable since declaration lists are optional
   Why?:
   	A program only requires parameters to be declared, other variables aren't required.
       
