test case #1 - procedure_Primary:
    result: 
        The test did pass since the program crashed as we expected.
    why?: 
        The program crashed since the input had a vector<token_323> of 
        192153584101141163 elements. This amount of elements exceeds the 
        maximum amount of elements a vector<token_323> can have. The maximum 
        amount of elements the vector can have is 192153584101141162 which 
        the input exceeded by 1. 
       
test case #2 - procedure_primary:
    results:
    	The test passed since the program will crash as expecetd 
    why?: 
    	Program will crash not due to the procedure_Primary function but due to the lexical analyzer.
    	Since the long data type is treated as one token. 
        
test case #3 - procedure_Print
    results:
       Parts of the string was missing. Depending on where it was placed the rest of the string would be voided out 
    why?:
        Program will not crash because \0 is a valid string but it is also a nullptr. Therefore, anything after \0 is 
        voided. A minor flaw that doesn't cause fatal errors but can feed compiler incorrect information. 
        
test case #4 - Arithmetic Exception:
    results:
    	The program will crash and give a "division_by_zero" error during compile time.
    why?:
    	A number cannot be divided by zero unless the divisor is 0 because otherwise the answer would be infinity and 
    	there is no way for infinity to be computed.

test case #5 - procedure_Parameter
    results:
        The program did not crash, meaning it returns 1 instead of 0 as a negative int does not quilify as a fatal error, but in the paramter of sqrt(). 
    why:
        Becuase sqrt() has a mathematical domain it is restriced to using only postive numbers,but if a negative number is inputed the output will just be the maximum negative number for an int, instead of throwing an exeption error and crashing.  