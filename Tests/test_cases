test case #1 - procedure_Primary:
    input:
         A vector of token_323 objects with 192153584101141163 elements, 5
    expected output: 
        The program will crash since it will exceed tha amount of elements a vector<token_323> can have.
        
test case #2 - procedure_Primary 
    input:
    	A math operation involving a long data type over its representation value plus any other number 
    expected output:
    	The program will crash since it will exceed the amount of bits in a 64-bit sysytem 
  
test case #3 - R20. <print> -> put(<"this \0 is a string">)
    input:
        Within vector<string> a part of the string will have \0(null pointer) that terminates the program/stops current function 
    expected output:
        The program will still run but there will be chuncks of the string that will be missing 

test case #4 - R8 <Qualifier "char">
    input:
    	int x = 10;
    	float y = 1.0;
    	boolean z = True;
    	char w = "Y";
    expected output:
    	procedure_Qualifier function should return True for the first three inputs, then False for the last input as it is not a
    	Qualifier according to the function. Therefore a crash is expected

test case #5 - procedure_Parameter
    input:
        Passing in a negative number value as a parameter in the a function like sqrt().
    expected output:
        The program will crash and throw and exeption as a negative number is out of the domain of the sqrt() parameter. 

Test case #6 - R19.<Return> -> return; | return <0/1>;
    input:
        Passing 0/1 as a return expression
    output:
        The system will crash and throw a ZeroDivisionError since 0/1 is a invalid operation
        
Test case #7 - R23. <Condition> -> <Expression "x">  <Relop "==">   <Expression"0.3">
   input:
       set x as the value of 
       double a = 0.1;
       double b = 0.2;
       double x = a+b;
       if (x == 0.3)
       {
       //code block
       }
   output:
        The code may return false or true. It is not guaranteed for either
Test case #8 R12. <Declaration> -> <Qualifier= "int"> <IDs ="x=5.5">
    input:
        Make a declaration of int to "int x = 5.5"
    output:
        The result will print out int as 5.

Test Case #9- R24:

Input:
Create a vector of tokens with a single token representing the "==" relational operator, and call the procedure_Relop function with this vector and an initial loc value of 0.

Output:
The procedure_Relop function should update the all_instructions vector with a new instruction to perform an "EQU" operation and update the rule_holder vector with a string describing the production rule used. The function should return true to indicate that the input token was recognized as a valid relational operator. The final value of loc should be 1 to indicate that the function has processed the single input token.

Test case #10- R25: 
      
Input:
Create a vector of tokens with a single integer literal, and call procedure_Expression with loc set to 0.

Output:
procedure_Expression should call procedure_Term and procedure_Expression_q to process the input token and any additional terms in the expression. If both functions return true, the function should update rule_holder and return true. If either function returns false, procedure_Expression should return false and print an error message. The final value of loc should be 1.

Test case #11- R25.1:

Input:
Create a vector of tokens with one or more terms, and call the procedure_Expression_q function with an initial loc value of 0.

Output:
procedure_Expression_q should recognize any leading + or - symbol followed by a term, generate the appropriate instruction, update rule_holder, and return true. If no symbol is found, rule_holder should be updated and the function should return true. If either procedure_Term or procedure_Expression_q return false, procedure_Expression_q should return false and print an error message. The final value of loc should be the index of the last processed token plus one.

Test case #12- R26:

Input:
Create a vector of tokens with one or more factors, and call procedure_Term with loc set to 0.

Output:
procedure_Term should call procedure_Factor and procedure_Term_q to process the input token(s) and any additional factors in the term. If both functions return true, procedure_Term should update rule_holder and return true. If either function returns false, procedure_Term should return false and print an error message. The final value of loc should be the index of the last processed token plus one.

Test case #13 - R9. <Body>  :: = { < Statement List> }
    input:
    	int main()
    	{
    	int x = 10;
    	if(x ==10)
    	{
    	   x+=1;
    	}
    	###############
    	int main()
    	{
    	
    	}
    	###############
    	int main()
    	int x = 10;
    	if(x ==10)
    	{ x+=1 }
    	}
    expected output:
    	These tests should crash the program because it either has a missing '}' to pair up with the main functions '{', 
    	or because it has no statements within the body, or because there are statements existing without '{'
    	
    	
Test case #14 - R10
   input:
   	int main()
   	{
   		std::cout<< "Hello World";
   	}
   	######################
   	int main(int argc, char *argv[])
   	{
   		int x = 0;
   		int y = 1;	
   	}
   	
   expected output:
   	There should be no error with both of these tests since this procedure simply tests for whether the optional declaration list, 
   	meaning the declaration of non-parameters, are there or not, and returns true regardless because you don't need to have a declaration list.
